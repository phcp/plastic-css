.flex {
  display: flex;

  &.vertical,
  &.v {
    flex-direction: column;

    &.reverse,
    &.r {
      flex-direction: column-reverse;
    }
  }

  &.horizontal,
  &.h {
    flex-direction: row;

    &.reverse,
    &.r {
      flex-direction: row-reverse;
    }
  }

  &.wrap {
    flex-wrap: wrap;

    &-reverse {
      flex-wrap: wrap-reverse;
    }
  }

  &.nowrap {
    flex-wrap: nowrap;
  }

  > {
    @for $i from 0 to $basis-limit {
      $size: $i * $basis-step;

      .fb-#{$size} {
        flex-basis: $size + unquote('%');
      }
    }

    .grow {
      flex-grow: 1;
    }
  }
}

@mixin flex-selectors($property, $values, $class-prefix, $is-child-node) {
  @each $value in $values {
    $selector-name: flex-selector-name($value);

    .flex {
      @if $is-child-node {
        & > .#{unquote($class-prefix)}-#{$selector-name} {
          #{$property}: $value;
        }
      } @else {
        &.#{unquote($class-prefix)}-#{$selector-name} {
          #{$property}: $value;
        }
      }
    }
  }
}

@include flex-selectors(justify-content, $jc-values, 'jc', false);
@include flex-selectors(align-items, $ai-values, 'ai', false);
@include flex-selectors(align-self, $as-values, 'as', true);
